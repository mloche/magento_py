#!/bin/python3
### Imports required module including custom modules in the ./modules/ folder ###
#integrer exit
#Standard modules#
import apt
import sys
sys.path.append('./modules/')
import yaml
import subprocess
import fileinput
#Custom modules#
import database as mariadb
import files

print("#####################################\n###### {} IS STARTING ###### \n ".format(sys.argv[0]))


### Function installing the package list given as variable ###
def install_package(package_list):
	if isinstance(package_list,(list,str)):
#control	print("Updating cache and installing package, please wait !")
		pkg_cache=apt.Cache()
		pkg_cache.update()
		pkg_cache.open(None)
		pkg_cache.upgrade()
		value=0
		max=len(package_list)
		for value in range(0,max):
			try:
				inst_pkg = pkg_cache[package_list[value]]
				if inst_pkg.is_installed:
					print("{} already installed".format(inst_pkg))
				else:
					inst_pkg.mark_install()
					try:
						pkg_cache.commit()
					except arg:
						sys.exit("Sorry, package install failed {}".format(str(arg)))
			except KeyError:
				print(" Package was not found" , inst_pkg[value])

	else:
		print("Install package requires a list of packages or a single package") 

### using bash command list given as arg  ### 

def command_use(list_cmd):
#control	print("received commands in command_use are {} ".format(cmd))
	if isinstance(list_cmd,(list,str)):
		value=0
		max=len(list_cmd)
		for value in range(0,max):
#control		print(cmd[value])
			try:
				try_cmd=list_cmd[value]
				try_cmd=try_cmd.split()
				completed= subprocess.run(try_cmd)
#control			print("Result for command {} : {} ".format(cmd[value], completed.returncode))
			except subprocess.CalledProcessError as err:
				sys.exit("Error using command : ", err)
	else:
		print("Command use requires a list of command or a single command")




### Function reading the yaml file and extracting the data ####

def import_yaml_file(file):
	if isinstance(file, str):
		print("Starting Import yaml")
		try:
			with open(file) as read_file:
				data = yaml.load(read_file, Loader=yaml.FullLoader)
				print("Data read are : {}".format(data))
				return(data)
		except Exception as err :
			print("Could not open {} file error : {}".format(file,err))
	else:
		sys.exit("Could not import yaml file : {} is not a valid file or path".format(file))




####################################################
#              MAIN PROGRAM                        #
####################################################

### Check for a second arguments before anything ###
if len(sys.argv) != 2:
	raise ValueError("Please provide path to yaml file as argument, usage : {} path ".format(sys.argv[0]))

### STEP 1 : Import YAML file content into yaml_data variable ###
yaml_data=import_yaml_file(sys.argv[1])
print("Data imported")
#control print(yaml_data)

### STEP 2 : Retrieve package list in YAML file and call the main package management process ###
"""
package_list=yaml_data.get('packages')
install_package(package_list)
print("Packages are installed")
"""


### STEP 3 : Getting database configuration from YAML       ###
### Test if database exist and is empty and call the module ###
### Database aliased as mariadb  and execute the querys     ###

db_info=yaml_data.get('database').get('database')
#print(db_info)
query=yaml_data.get('database').get('query')

maria_result=mariadb._check_db(db_info)
if maria_result == False:
	mariadb._query_list(db_info,query)
	print("Database configuration done")
else:
	sys.exit("Database configuration was not done")



### STEP 4 : Installing elastic search ###


### STEP 5 : Creating SSL Cert for Apache ###


### STEP 6 : Editing conf files ###
"""
php.ini
default-ssl.conf
50-server.conf
000-default.conf
"""


### STEP 7 : install magento (copy from git, composer install and run setup)


### STEP 8 : Activate apachemodules and restart apache  ###
"""
commands=yaml_data.get('commands')
for key in commands.keys():
#	print(key)
#	print(commands[key])
	command_use(commands[key])
"""
### STEP 9 : Install magento and cron install ###


### STEP 10 : Delete magento setup folder  ###

