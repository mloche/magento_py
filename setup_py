#!/bin/python3
### Imports required module including custom modules in the ./modules/ folder ###

#Standard modules#
import apt
import sys
sys.path.append('./modules/')
import yaml
import subprocess
import fileinput
#Custom modules#
import database as mariadb
import files

print("#####################################\n###### {} IS STARTING ###### \n ".format(sys.argv[0]))


### Function installing the package list given as variable ###
def install_package(package_list):
	if isinstance(package_list,(list,str)):
#control	print("Updating cache and installing package, please wait !")
		pkg_cache=apt.Cache()
		pkg_cache.update()
		pkg_cache.open(None)
		pkg_cache.upgrade()
		value=0
		max=len(package_list)
		for value in range(0,max):
			try:
				inst_pkg = pkg_cache[package_list[value]]
				if inst_pkg.is_installed:
					print("{} already installed".format(inst_pkg))
				else:
					inst_pkg.mark_install()
					try:
						pkg_cache.commit()
					except arg:
						sys.exit("Sorry, package install failed {}".format(str(arg)))
			except KeyError:
				print(" Package was not found" , inst_pkg[value])

	else:
		print("Install package requires a list of packages or a single package") 

### using bash command list given as arg  ### 

def command_use(list_cmd):
#control	print("received commands in command_use are {} ".format(cmd))
	if isinstance(list_cmd,(list,str)):
		value=0
		max=len(list_cmd)
		print(max)
		for value in range(0,max):
			print(list_cmd[value])
			try:
				try_cmd=list_cmd[value]
				try_cmd=try_cmd.split()
				completed= subprocess.run(try_cmd)
#control			print("Result for command {} : {} ".format(cmd[value], completed.returncode))
			except subprocess.CalledProcessError as err:
				sys.exit("Error using command : ", err)
		return(completed)
	else:
		print("Command use requires a list of command or a single command")




### Function reading the yaml file and extracting the data ####

def import_yaml_file(file):
	if isinstance(file, str):
		print("Starting Import yaml")
		try:
			with open(file) as read_file:
				data = yaml.load(read_file, Loader=yaml.FullLoader)
#control				print("Data read are : {}".format(data))
				return(data)
		except Exception as err :
			print("Could not open {} file error : {}".format(file,err))
	else:
		sys.exit("Could not import yaml file : {} is not a valid file or path".format(file))



####################################################
#              MAIN PROGRAM                        #
####################################################

### Check for a second arguments before anything ###
if len(sys.argv) != 2:
	raise ValueError("Please provide path to yaml file as argument, usage : {} path ".format(sys.argv[0]))


### STEP 1 : Import YAML file content into yaml_data variable ###

yaml_data=import_yaml_file(sys.argv[1])
print("STEP 1 : YAML data imported")
#control	print(yaml_data)


### STEP 2 : Retrieve package list in YAML file and call the main package management process ###
"""
package_list=yaml_data.get('packages')
#control print(_package_list)
install_package(package_list)
print("STEP 2 : Packages are installed")
"""


### STEP 3 : Getting database configuration from YAML       ###
### Test if database exist, if it is empty calls the module ###
### Database aliased as mariadb  and execute the querys     ###
"""
db_info=yaml_data.get('database').get('database')
#print(db_info)
query=yaml_data.get('database').get('query')

maria_result=mariadb._check_db(db_info)
#control print("maria result is ",maria_result)
#Maria result will be False if database exists, will return True if 
#the database did not exist or could not connect with the parameters given
#script will go on in this case
if maria_result == True:
	mariadb._query_list_sock(db_info,query)
	print("STEP 3 : Database configuration done")
else:
	sys.exit("STEP 3 : Database configuration was not done")

"""

### STEP 4 : Installing elastic search ###
"""
elastic_cmd=yaml_data.get('commands').get('elasticsearch')
command_use(elastic_cmd)
print("STEP 4 : Elastic search installed")
"""
### STEP 5 : Creating SSL Cert for Apache ###
"""
ssl_cmd=yaml_data.get('commands').get('ssl')
print(ssl_cmd)
command_use(ssl_cmd)
print("STEP 5 : SSL for apache installed")
"""

### STEP 6 : install magento (copy from git, composer install and run setup)
"""
magento_inst=yaml_data.get('commands').get('magento_inst_git')
command_use(magento_inst)
print("STEP 6 : Magento installed from github")
"""

### STEP 7 : Editing conf files ###
"""
conf_files=yaml_data.get('files')
for mod_file in conf_files.keys():
	try:
		file_arg=conf_files[mod_file].get('file')
		string_arg=conf_files[mod_file].get('string')
		new_string_arg=conf_files[mod_file].get('new_string')
		files._replace_string(file_arg,string_arg,new_string_arg)
	except:
		sys.exit("Conf files modifications failed, STEP 8")

print("STEP 7 : configuration files modified")
"""

### STEP 8 : Activate apachemodules and restart apache  ###
"""
modules_apache=yaml_data.get('commands').get('apache2_mods')
command_use(modules_apache)
print("STEP 8 : Apache modules activated")
"""

### STEP 9 : Install magento and cron install ###
"""
magento_inst=yaml_data.get('magento_setup')
magento_inst_command="/var/www/html/magento2/bin/./magento setup:install "
#control print(magento_inst)
for option in magento_inst:
#control	print(option,magento_inst[option])
	magento_inst_command=magento_inst_command + str("--"+option+"="+magento_inst[option]+" ")
#control print(magento_inst_command)
try:
	inst=subprocess.run(magento_inst_command.split())
#	print(inst)
	instcron=subprocess.run("/var/www/html/magento2/bin/./magento cron:install".split())
#	print(instcron)
except:
	sys.exit("STEP 9 : could not install magento")

print("STEP 9 : magento installed and cron created")

"""

### STEP 10 : Configure ACL for www folder and final restart apache ###
"""
apache_end=yaml_data.get('commands').get('apache2_end')
command_use(apache_end)
print("STEP 10 : Apache restarted")
"""

### STEP 11 : Delete magento setup folder and show admin URL ###
"""

magento_url= subprocess.run("./var/www/html/magento2/bin/magento info:adminuri".split(),capture_output=True)
printurl=str(magento_url.stdout)[4:28]
#control print(printurl)
print("STEP 11 : magento installed and working :\n ###### \n \n # {} # \n\n #####".format(printurl))
"""

print("#####################################\n###### {} IS FINISHED ###### \n ".format(sys.argv[0]))
