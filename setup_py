#!/bin/python3
### Imports required module including custom modules in the ./modules/ folder ###

#Standard modules#
import apt
import sys
sys.path.append('./modules/')
import yaml
import subprocess
import fileinput
#Custom modules#
import database as mariadb
import files

print("#####################################\n###### {} IS STARTING ###### \n ".format(sys.argv[0]))


### Function installing the package list given as variable ###
def install_package(package_list):
	print("Updating cache and installing package, please wait !")
	pkg_cache=apt.Cache()
	pkg_cache.update()
	pkg_cache.open(None)
	pkg_cache.upgrade()
	value=0
	max=len(package_list)
	for value in range(0,max):
		try:
			inst_pkg = pkg_cache[package_list[value]]
			if inst_pkg.is_installed:
				print("{} already installed".format(inst_pkg))
			else:
				inst_pkg.mark_install()
				try:
					pkg_cache.commit()
				except arg:
					print(" >>", sys.stderr, "Sorry, package install failed [{err}]".format(err=str(arg)))
		except KeyError:
			print(" Package was not found" , inst_pkg[value])


### using bash command list given as arg  ### 

def command_use(cmd):
#control	print("received commands in command_use are {} ".format(cmd))
	value=0
	max=len(cmd)
	for value in range(0,max):
#control		print(cmd[value])
		try:
			try_cmd=cmd[value]
			try_cmd=try_cmd.split()
			completed= subprocess.run(try_cmd)
#control			print("Result for command {} : {} ".format(cmd[value], completed.returncode))
		except subprocess.CalledProcessError as err:
			print("Error using command : ", err)





### Function reading the yaml file and extracting the data ####

def import_yaml_file(file):
	if isinstance(file, str):
		print("Starting Import yaml")
		try:
			with open(file) as read_file:
				data = yaml.load(read_file, Loader=yaml.FullLoader)
#				print("Data read are : {}".format(data))
				return(data)
		except :
			print("Could not open {} file".format(file))
	else:
		print("Could not open file : {} is not a valid file or path".format(file))




####################################################
#              MAIN PROGRAM                        #
####################################################

### Check for a second arguments before anything ###
if len(sys.argv) != 2:
	raise ValueError("Please provide path to yaml file as argument, usage : {} path ".format(sys.argv[0]))

### Import YAML file content into yaml_data variable ###
yaml_data=import_yaml_file(sys.argv[1])
#control print(yaml_data)

### Retrieve package list in YAML file and call the main package management process ###
"""
package_list=yaml_data.get('packages')
install_package(package_list)
"""


### Getting database configuration from YAML and call the module Database aliased as mariadb  ###
"""
db_info=yaml_data.get('database').get('database')
query=yaml_data.get('database').get('query')
mariadb._query_list(db_info,query)
"""

### Modify config files for apache and requisite 
#modif_infos=yaml_data.get('insert')
#files._insert_top(file,string)

### Activate modules and run commands  ###
"""
commands=yaml_data.get('commands')
for key in commands.keys():
#	print(key)
#	print(commands[key])
	command_use(commands[key])
"""

#install magento (copy from git, composer install and run setup)




### Modify file function ###
"""
modif_data=yaml_data.get('files')
print(modif_data)
#needs loops over file sections
apache_file=modif_data.get('apache')
print("file :",apache_file)
file=apache_file.get('file')
string=apache_file.get('string')
new_string=apache_file.get('new_string')

files._replace_string(file,string,new_string)

"""



