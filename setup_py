#!/bin/python3
import apt
import sys
import yaml
# import os #depreciated must use subprocess
import pymysql as mariadb
import subprocess

print("Starting ! \n")

####connecting and configuring database 
def configure_database(db_serv,db_admin,db_pass,db_name):
	conn=0
	try:
		conn = mariadb.connect(host=db_serv,user=db_admin,password=db_pass,database=db_name,port=3306)
	except mariadb.Error as e:
		print("error connecting to mariadb platform: {}".format(e))

	cursor = conn.cursor()
	cursor.execute("SELECT VERSION()")
	data = cursor.fetchone()
	print("database version :  {}".format(data))
	cursor.execute("show grants;")
	data = cursor.fetchone()
	print(data)
	conn.close()

### Function installing the package given as variable #######

def install_package(pkg_name):
	print("Entering install_package and updating cache, please wait !")
	pkg_cache=apt.Cache()
	pkg_cache.update()
	pkg_cache.open(None)
	pkg_cache.upgrade()
#	pkg_name = input("Type package you want for install of check if installed \n")
	try:
		inst_pkg = pkg_cache[pkg_name]
		print("inst_package = " + pkg_name)
		if inst_pkg.is_installed:
			print("{} already installed".format(pkg_name))
		else:
			inst_pkg.mark_install()
			try:
				print("Installing ' " + pkg_name + " ' please wait")
				pkg_cache.commit()
			except arg:
				print(" >>", sys.stderr, "Sorry, package install failed [{err}]".format(err=str(arg)))
	except KeyError:
		print(" Package ' " + pkg_name + " '  was not found")

#using bash commands 
def command_use(cmd):
	print("received commands in command_use are {} ".format(cmd))
	value=0
	max=len(cmd)
#	completed=subprocess.run(['ls', '-l'])
#	print("return code : ", completed.returncode)
	for value in range(0,max):
#		print(cmd[value])
		try:
			try_cmd=cmd[value]
			try_cmd=try_cmd.split()
#			try_cmd="md"
#			print("try_cmd after split  :" , try_cmd)
#			os.system(try_cmd)
			completed= subprocess.run(try_cmd)
			print("Result for command {} : {} ".format(cmd[value], completed.returncode))
		except subprocess.CalledProcessError as err:
			print("Error : ", err)

#modify config files for magento setup
def modify_conf_files():
	print("Function modify_config_files started !")


###### Function reading the yaml file and extracting the data to call
###### each function with its arguments

def import_package_file():
	print("Starting Import package")
	with open('config_files/items.yaml') as file:
		data = yaml.load(file, Loader=yaml.FullLoader)
		print("Data read are : {}".format(data))
		for key in data.keys():
			if key == "packages":
				print("Installing {} -  {}" .format(key,data[key]))
				package_list=data[key]
				value=0
				max=len(package_list)
				print("valeur de Max : " + str(max))
				for value in range(0,max):
					print(package_list[value])
#					install_package(package_list[value])
			elif key == "database":
#control			print("value for {} - {}".format(key,data[key]))
				db_info=data[key]
				configure_database(db_info[0],db_info[1],db_info[2],db_info[3])
			elif key == "commands":
				bash_cmd=data[key]
				print("the bash_cmd is {}".format(type(bash_cmd)))
				print("read commands are {} ".format(bash_cmd))
				command_use(bash_cmd)
#				for folder in bash_cmd.key():
#					print(folder)
#				print("Read command for file {} is {}".format(key,data[key]))
			else:
				print("unknown parameter {} - {}".format(key,data[key]))


####################################################
#              MAIN PROGRAM                        #
####################################################

import_package_file()
modify_conf_files()
